---
description:
globs:
alwaysApply: false
---
# 开发规范

## TypeScript 规范

### 类型定义
- 优先使用 `interface` 定义对象结构
- 为所有函数参数和返回值添加类型注解
- 避免使用 `any` 类型，使用 `unknown` 替代
- 使用 `enum` 定义常量集合

```typescript
// 推荐
interface BottleData {
  id: string;
  content: string;
  userId: string;
  createdAt: Date;
}

// 不推荐
const bottleData: any = { ... };
```

### 导入/导出规范
- 使用绝对路径导入：`@/components/...`
- 优先使用命名导出
- 按以下顺序组织导入：
  1. React 相关
  2. 第三方库
  3. 项目内部模块
  4. 类型导入

## React 开发规范

### 组件设计
- 使用函数式组件和 React Hooks
- 组件名使用 PascalCase
- 文件名与组件名保持一致
- 每个组件单独一个文件

### Props 接口
```typescript
interface BottleCardProps {
  bottle: BottleData;
  onReply?: (bottleId: string) => void;
  className?: string;
}

export function BottleCard({ bottle, onReply, className }: BottleCardProps) {
  // 组件实现
}
```

### 状态管理
- 使用 `useState` 处理本地状态
- 使用 `useEffect` 处理副作用
- 复杂状态考虑 `useReducer`
- 全局状态使用 Zustand

## Next.js 规范

### 页面组件
- 页面组件放在 `app/` 目录下
- 使用 `page.tsx` 命名约定
- 实现适当的错误边界和加载状态

### API 路由
- API 路由位于 `app/api/` 目录
- 使用 RESTful 命名约定
- 实现适当的错误处理和状态码
- 添加类型安全的请求/响应接口

```typescript
// app/api/bottles/route.ts
export async function GET(request: NextRequest) {
  try {
    // 业务逻辑
    return NextResponse.json(data);
  } catch (error) {
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
```

## 样式规范

### Tailwind CSS
- 优先使用 Tailwind 工具类
- 使用语义化的类名组合
- 复杂样式考虑组件级 CSS
- 响应式设计使用 Tailwind 断点

### 颜色系统
- 使用 Tailwind 预定义色彩
- 自定义色彩在 [tailwind.config.js](mdc:tailwind.config.js) 中定义
- 保持一致的颜色使用

## 错误处理

### 客户端错误处理
- 使用 Error Boundary 捕获组件错误
- 实现用户友好的错误提示
- 记录错误日志用于调试

### 服务端错误处理
- API 路由返回适当的 HTTP 状态码
- 实现统一的错误响应格式
- 避免暴露敏感错误信息

## 代码质量

### 命名规范
- 变量和函数使用 camelCase
- 常量使用 UPPER_SNAKE_CASE
- 组件和类使用 PascalCase
- 文件和目录使用 kebab-case

### 注释规范
- 为复杂业务逻辑添加注释
- 使用 JSDoc 为公共函数添加文档
- 避免显而易见的注释

### 代码分割
- 使用 `dynamic` 进行组件懒加载
- 分离业务逻辑和 UI 组件
- 提取可复用的工具函数到 `lib/` 目录
