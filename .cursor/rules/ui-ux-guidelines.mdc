---
description: 
globs: 
alwaysApply: true
---
# UI/UX 设计规范

## 设计系统基础

### 颜色系统
基于 Tailwind CSS 预设色彩，参考 [tailwind.config.js](mdc:tailwind.config.js) 配置：

```typescript
// 海洋主题色系
const colors = {
  // 主色系 (海洋蓝)
  primary: {
    50: '#f0f9ff',
    100: '#e0f2fe',
    200: '#bae6fd',
    300: '#7dd3fc',
    400: '#38bdf8',
    500: '#0ea5e9',
    600: '#0284c7',
    700: '#0369a1',
    800: '#075985',
    900: '#0c4a6e',
  },
  // 次要色系 (水蓝)
  secondary: {
    50: '#ecfeff',
    100: '#cffafe',
    200: '#a5f3fc',
    300: '#67e8f9',
    400: '#22d3ee',
    500: '#06b6d4',
    600: '#0891b2',
    700: '#0e7490',
    800: '#155e75',
    900: '#164e63',
  },
  // 深海蓝色系
  deepblue: {
    50: '#eff6ff',
    100: '#dbeafe',
    200: '#bfdbfe',
    300: '#93c5fd',
    400: '#60a5fa',
    500: '#3b82f6',
    600: '#2563eb',
    700: '#1d4ed8',
    800: '#1e40af',
    900: '#1e3a8a',
  },
  // 状态色彩
  success: '#10b981',
  warning: '#f59e0b',
  error: '#ef4444',
  
  // Telegram 主题色
  telegram: {
    bg: 'var(--tg-theme-bg-color)',
    text: 'var(--tg-theme-text-color)',
    hint: 'var(--tg-theme-hint-color)',
    link: 'var(--tg-theme-link-color)',
    button: 'var(--tg-theme-button-color)',
    buttonText: 'var(--tg-theme-button-text-color)',
  },
};
```

### 字体系统
```css
/* 全局字体样式在 globals.css 中定义 */
.text-xs    { font-size: 0.75rem; }   /* 12px */
.text-sm    { font-size: 0.875rem; }  /* 14px */
.text-base  { font-size: 1rem; }      /* 16px */
.text-lg    { font-size: 1.125rem; }  /* 18px */
.text-xl    { font-size: 1.25rem; }   /* 20px */
.text-2xl   { font-size: 1.5rem; }    /* 24px */
.text-3xl   { font-size: 1.875rem; }  /* 30px */
```

### 间距系统
```css
/* Tailwind 间距系统 */
.p-1   { padding: 0.25rem; }    /* 4px */
.p-2   { padding: 0.5rem; }     /* 8px */
.p-4   { padding: 1rem; }       /* 16px */
.p-6   { padding: 1.5rem; }     /* 24px */
.p-8   { padding: 2rem; }       /* 32px */

/* 外边距同理 */
.m-1, .m-2, .m-4, .m-6, .m-8
```

## 组件设计规范

### 按钮组件
```typescript
interface ButtonProps {
  variant: 'primary' | 'secondary' | 'outline' | 'ghost';
  size: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  loading?: boolean;
  children: React.ReactNode;
  onClick?: () => void;
}

// 使用示例 (海洋主题)
<Button 
  variant="primary" 
  size="md" 
  className="w-full ocean-button"
>
  投递漂流瓶
</Button>

// 海洋主题按钮变体
<Button className="bg-ocean-500 hover:bg-ocean-600 text-white">
  发现漂流瓶
</Button>

<Button className="bg-gradient-to-r from-ocean-400 to-deepblue-500 text-white">
  投入海洋
</Button>
```

### 卡片组件
```typescript
interface BottleCardProps {
  bottle: BottleData;
  onReply?: () => void;
  onLike?: () => void;
  className?: string;
}

// 设计要点：
// - 圆角: rounded-lg (8px)
// - 阴影: shadow-lg shadow-ocean-500/10
// - 边框: border border-ocean-200
// - 内边距: p-6
// - 海洋主题背景: bg-white/90 backdrop-blur-sm
```

### 输入框组件
```typescript
interface InputProps {
  label?: string;
  placeholder?: string;
  error?: string;
  disabled?: boolean;
  multiline?: boolean;
  maxLength?: number;
}

// 设计要点：
// - 边框: border-2 border-ocean-200
// - 聚焦状态: focus:border-ocean-500 focus:ring-2 focus:ring-ocean-200
// - 错误状态: border-red-500
// - 圆角: rounded-md
// - 海洋主题: placeholder-ocean-400
```

## 布局规范

### 页面布局
```typescript
// 标准页面布局结构
<div className="min-h-screen bg-gray-50">
  <header className="sticky top-0 z-50 bg-white border-b">
    {/* 页面头部 */}
  </header>
  
  <main className="container mx-auto px-4 py-6">
    {/* 主要内容 */}
  </main>
  
  <footer className="mt-auto py-4 bg-white border-t">
    {/* 页面底部 */}
  </footer>
</div>
```

### 响应式网格
```css
/* 移动端优先的响应式设计 */
.grid-responsive {
  @apply grid grid-cols-1 gap-4;
  @apply sm:grid-cols-2 sm:gap-6;
  @apply lg:grid-cols-3 lg:gap-8;
}
```

### 容器规范
```css
/* 页面容器 */
.container {
  @apply max-w-7xl mx-auto px-4;
  @apply sm:px-6 lg:px-8;
}

/* 内容容器 */
.content-container {
  @apply max-w-2xl mx-auto;
}
```

## 交互设计

### 触摸友好设计
- 最小触摸目标: 44px x 44px
- 按钮间距: 至少 8px
- 手势支持: 滑动、长按等

```css
/* 触摸友好的按钮样式 */
.touch-button {
  @apply min-h-[44px] min-w-[44px];
  @apply touch-manipulation;
  @apply active:scale-95 transition-transform;
}
```

### 动画规范
```typescript
// 使用 Framer Motion 进行动画
import { motion } from 'framer-motion';

// 页面切换动画
const pageVariants = {
  initial: { opacity: 0, y: 20 },
  animate: { opacity: 1, y: 0 },
  exit: { opacity: 0, y: -20 },
};

// 组件入场动画
const fadeInUp = {
  initial: { opacity: 0, y: 20 },
  animate: { opacity: 1, y: 0 },
  transition: { duration: 0.3 },
};
```

### 加载状态
```typescript
// 骨架屏组件
export function BottleCardSkeleton() {
  return (
    <div className="animate-pulse">
      <div className="h-4 bg-gray-200 rounded mb-2"></div>
      <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
      <div className="h-4 bg-gray-200 rounded w-1/2"></div>
    </div>
  );
}

// 加载指示器
export function LoadingSpinner() {
  return (
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-ocean-500"></div>
  );
}

// 海洋主题加载指示器
export function OceanLoadingSpinner() {
  return (
    <div className="animate-spin rounded-full h-8 w-8 border-2 border-ocean-200 border-t-ocean-500"></div>
  );
}
```

## 漂流瓶专属设计

### 漂流瓶样式
```typescript
interface BottleStyle {
  color: 'ocean' | 'deepblue' | 'aqua' | 'teal' | 'cyan';
  pattern: 'solid' | 'gradient' | 'striped' | 'dotted' | 'waves';
  decoration: 'none' | 'stars' | 'hearts' | 'waves' | 'bubbles';
}

// 漂流瓶视觉效果 (基于海洋主题)
const bottleStyles = {
  ocean: 'bg-gradient-to-br from-ocean-400 to-ocean-600',
  deepblue: 'bg-gradient-to-br from-deepblue-400 to-deepblue-600',
  aqua: 'bg-gradient-to-br from-cyan-400 to-cyan-600',
  teal: 'bg-gradient-to-br from-teal-400 to-teal-600',
  cyan: 'bg-gradient-to-br from-cyan-300 to-cyan-500',
};

// 漂流瓶装饰效果
const bottleDecorations = {
  waves: 'bg-gradient-to-r from-transparent via-white/20 to-transparent',
  bubbles: 'bg-[radial-gradient(circle_at_30%_70%,_rgba(255,255,255,0.3)_2px,_transparent_2px)]',
  stars: 'bg-[radial-gradient(circle_at_random,_rgba(255,255,255,0.8)_1px,_transparent_1px)]',
  hearts: 'bg-[url("data:image/svg+xml,...")]', // 心形图案
};
```

### 海洋主题设计
```css
/* 海洋背景效果 (使用配置中的海洋色系) */
.ocean-background {
  @apply bg-ocean-gradient;
  background-image: 
    radial-gradient(circle at 20% 50%, rgba(255,255,255,0.1) 2px, transparent 2px),
    radial-gradient(circle at 80% 80%, rgba(255,255,255,0.1) 1px, transparent 1px);
}

/* 浅色海洋背景 */
.ocean-light-background {
  @apply bg-ocean-light;
}

/* 深海背景效果 */
.deep-ocean-background {
  @apply bg-deep-ocean;
}

/* 水波纹背景 */
.water-ripple-background {
  @apply bg-water-ripple;
}

/* 波浪动效 */
.wave-animation {
  @apply relative overflow-hidden;
  animation: wave 3s ease-in-out infinite;
}

.wave-slow-animation {
  animation: wave-slow 3s ease-in-out infinite;
}

.float-animation {
  animation: float 3s ease-in-out infinite;
}

.ripple-animation {
  animation: ripple 2s linear infinite;
}

/* 海洋主题的交互效果 */
.ocean-button {
  @apply bg-ocean-500 hover:bg-ocean-600 active:bg-ocean-700;
  @apply text-white font-medium rounded-lg px-4 py-2;
  @apply transition-colors duration-200;
  @apply shadow-lg shadow-ocean-500/25;
}

.ocean-card {
  @apply bg-white/90 backdrop-blur-sm border border-ocean-200;
  @apply rounded-xl shadow-lg shadow-ocean-500/10;
  @apply hover:shadow-xl hover:shadow-ocean-500/20;
  @apply transition-all duration-300;
}
```

## 状态设计

### 空状态
```typescript
export function EmptyState({ 
  title, 
  description, 
  action 
}: EmptyStateProps) {
  return (
    <div className="text-center py-12">
      <div className="w-24 h-24 mx-auto mb-4 text-gray-400">
        {/* 空状态图标 */}
      </div>
      <h3 className="text-lg font-medium text-gray-900 mb-2">
        {title}
      </h3>
      <p className="text-gray-500 mb-6">
        {description}
      </p>
      {action}
    </div>
  );
}
```

### 错误状态
```typescript
export function ErrorState({ 
  error, 
  onRetry 
}: ErrorStateProps) {
  return (
    <div className="text-center py-12">
      <div className="text-red-500 text-6xl mb-4">⚠️</div>
      <h3 className="text-lg font-medium text-gray-900 mb-2">
        出错了
      </h3>
      <p className="text-gray-500 mb-6">
        {error.message}
      </p>
      <Button onClick={onRetry} variant="outline">
        重试
      </Button>
    </div>
  );
}
```

## 无障碍设计

### 语义化 HTML
```typescript
// 使用适当的 HTML 语义标签
<article className="bottle-card">
  <header className="bottle-header">
    <h2 className="bottle-title">漂流瓶标题</h2>
    <time className="bottle-date" dateTime="2024-01-01">
      1小时前
    </time>
  </header>
  
  <main className="bottle-content">
    <p>漂流瓶内容...</p>
  </main>
  
  <footer className="bottle-actions">
    <button aria-label="回复漂流瓶">回复</button>
    <button aria-label="收藏漂流瓶">收藏</button>
  </footer>
</article>
```

### 键盘导航
```css
/* 聚焦指示器 (海洋主题) */
.focus-visible {
  @apply outline-none ring-2 ring-ocean-500 ring-offset-2;
}

/* 跳过链接 (海洋主题) */
.skip-link {
  @apply sr-only focus:not-sr-only;
  @apply fixed top-4 left-4 z-50;
  @apply bg-ocean-600 text-white px-4 py-2 rounded;
}
```

### ARIA 标签
```typescript
// 为动态内容添加适当的 ARIA 标签
<div 
  role="status" 
  aria-live="polite"
  aria-label="漂流瓶加载状态"
>
  {loading ? '正在加载漂流瓶...' : `发现了 ${bottles.length} 个漂流瓶`}
</div>
```

## 性能优化

### 图片优化
```typescript
import Image from 'next/image';

// 使用 Next.js Image 组件
<Image
  src={bottleImage}
  alt="漂流瓶图片"
  width={300}
  height={300}
  placeholder="blur"
  blurDataURL="data:image/..."
  className="rounded-lg object-cover"
/>
```

### 懒加载组件
```typescript
import dynamic from 'next/dynamic';

// 懒加载重型组件
const BottleEditor = dynamic(
  () => import('@/components/BottleEditor'),
  { 
    loading: () => <BottleEditorSkeleton />,
    ssr: false 
  }
);
```

## 主题支持

### 深色模式
```css
/* 深色模式样式 */
@media (prefers-color-scheme: dark) {
  .dark-mode {
    @apply bg-gray-900 text-white;
  }
  
  .dark-mode .card {
    @apply bg-gray-800 border-gray-700;
  }
}
```

### 主题切换
```typescript
export function useTheme() {
  const [theme, setTheme] = useState<'light' | 'dark'>('light');
  
  const toggleTheme = () => {
    setTheme(prev => prev === 'light' ? 'dark' : 'light');
  };
  
  return { theme, toggleTheme };
}
```

### 海洋主题渐变
```typescript
// 预定义的海洋主题渐变
const oceanGradients = {
  primary: 'bg-ocean-gradient', // 主要海洋渐变
  light: 'bg-ocean-light',      // 浅色海洋渐变
  waves: 'bg-ocean-waves',      // 海浪渐变
  deep: 'bg-deep-ocean',        // 深海渐变
  ripple: 'bg-water-ripple',    // 水波纹效果
};
```
